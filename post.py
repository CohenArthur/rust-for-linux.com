#!/usr/bin/env python3
# SPDX-License-Identifier: GPL-2.0

"""Postprocesses the "book".
"""

import json
import os
import pathlib
import re
import shutil

def handle_markdown(string):
    if string.count("`") % 2 != 0:
        raise RuntimeError("Unbalanced backticks.")

    while True:
        if "`" not in string:
            return string

        # Should use `code`, but it requires fixing the general CSS.
        string = string.replace("`", '<span class="rfl-mono-font">', 1)
        string = string.replace("`", "</span>", 1)

def process(path, content, html_menu, html_index_toc):
    # Fix index title (`index.html` and `Rust-for-Linux.html`).
    content = content.replace("<title>Rust for Linux - Rust for Linux</title>", "<title>Rust for Linux</title>")

    # Fix header.
    content = content.replace('<link rel="icon" href="favicon.svg">', "")
    content = content.replace('<link rel="shortcut icon" href="favicon.png">', """
        <link rel="icon" href="Rust-for-Linux.svg">

        <meta property="og:url" content="https://rust-for-linux.com">
        <meta property="og:type" content="website">
        <meta property="og:title" content="Rust for Linux">
        <meta property="og:description" content="Adding support for the Rust language to the Linux kernel">
        <meta property="og:image" content="https://rust-for-linux.com/Rust-for-Linux.svg">
        <script type="application/ld+json">
        {
            "@context": "http://schema.org",
            "@type": "CreativeWork",
            "name": "Rust for Linux",
            "description": "Adding support for the Rust language to the Linux kernel",
            "url": "https://rust-for-linux.com",
            "image": "https://rust-for-linux.com/Rust-for-Linux.svg"
        }
        </script>
        <style>
        #logo {
            display: block;
            margin-left: auto;
            margin-right: auto;
        }

        .rfl-menu-block {
            text-align: center;
            font-size: 1.8rem;
            font-weight: bold;
        }

        .rfl-mono-font {
            font-family: var(--mono-font);
        }

        .rfl-mobile-links {
            display: none;
        }

        @media only screen and (max-width: 1080px) {
            .rfl-mobile-links {
                display: block;
            }
        }

        .chapter li.chapter-item {
            margin-top: 0.2em !important;
            margin-left: 1.5em !important;
        }

        .chapter li.part-title {
            margin-bottom: -0.3em !important;
            margin-top: 1em !important;
        }

        .quote-highlight:target {
            /*
             * `--table-header-bg` is used as an existing color in the themes
             * that is good enough for highlighting the `blockquote`s.
             */
            background-color: var(--table-header-bg);
        }
        </style>
    """)

    # Provide custom menu.
    content = re.sub(r'<div class="sidebar-scrollbox">.*?</div>', html_menu, content, count=1, flags=re.DOTALL)

    # Append Table of Contents in index (`index.html` and `Rust-for-Linux.html`), as well as
    # the links for mobile.
    content = content.replace("<!-- Generated TOC -->", html_index_toc)

    return content

def main():
    # Read TOC generated by `pre.py`.
    with open("summary.json", "r", encoding="utf-8") as f:
        json_summary = json.load(f)

    # Generate menu.
    html_menu = ""
    for block_name in json_summary:
        html_block = ""
        for section_name in json_summary[block_name]:
            if section_name != "":
                html_block += f'<li class="part-title">{section_name}</li>'
            for (text, link) in json_summary[block_name][section_name]:
                html_block += f'<li class="chapter-item"><a href="{link}" tabindex="0">{handle_markdown(text)}</a></li>'

        html_menu += f"""
            <p class="rfl-menu-block">{block_name}</p>
            <ol class="chapter">{html_block}</ol>
        """

    html_menu = f"""
        <div class="sidebar-scrollbox">
            <a href="/"><img id="logo" src="Rust-for-Linux.svg" alt="Rust for Linux Logo"></a>
            {html_menu}
        </div>
    """

    # Generate TOC for index pages.
    html_index_toc = {}
    for block_name in json_summary:
        html_index_toc[block_name] = ""
        for section_name in json_summary[block_name]:
            section_links = ""
            for (text, link) in json_summary[block_name][section_name]:
                section_links += f'<li><a href="{link}" tabindex="0">{handle_markdown(text)}</a></li>'

            if section_name != "":
                html_index_toc[block_name] += f"<h3>{section_name}</h3>\n"
            if section_links != "":
                html_index_toc[block_name] += f"<ul>{section_links}</ul>\n"

    html_index_toc = f"""
        <h2><a class="header" href="#the-project">The project</a></h2>
        {html_index_toc["The project"]}
        <div class="rfl-mobile-links">
            <h2><a class="header" href="#links">Links</a></h2>
            {html_index_toc["Links"]}
        </div>
    """

    # Post-process each `mdbook`-generated file.
    for path in pathlib.Path().glob("book/**/*.html"):
        with path.open("r+", encoding="utf-8") as f:
            new_content = process(path, f.read(), html_menu, html_index_toc)
            f.seek(0)
            f.truncate()
            f.write(new_content)

    # Remove unneeded files.
    os.remove("book/favicon.svg")
    os.remove("book/favicon.png")

if __name__ == "__main__":
    main()
